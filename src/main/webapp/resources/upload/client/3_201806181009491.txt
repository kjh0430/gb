<스프링 프레임워크를 이용한 프로젝트 구성>
 1. 새 프로젝트 작성시 프로젝트명을 반드시 소문자로 만들 것
	: 프로젝트명이 바로 context root 명이 됨
  => 주의 : 프로젝트를 저장할 워크스페이스와 경로에 한글이 포함되어 있으면 에러 발생 가능성이 있음
  => 기본 패키지(base-package)는 프로젝트명으로 하면 됨
	: front controller 로 지정한 DispatcherServlet 파일(xml)에 등록됨

 2. web.xml 파일에 front controller 가 될 DispatcherServlet 클래스 파일(xml)을 등록해야 함
	: <servlet> 과 <servlet-mapping> 엘리먼트를 사용함
	- 기본으로 제공되므로 경로와 파일명을 수정함 : 반드시 위치는 /WEB-INF/ 폴더 아래에 둠
	- 참고로, 스프링을 통한 컨트롤러 요청시 사용되는 url-pattern 에는 일반적으로 .do 가 붙음
  => welcome-file 등록함 : 파일의 위치는 webapp/ 폴더 바로 아래에 둠
	(스프링이 적용된 프로젝트에서는 content directory 가 webapp 폴더임.
  => 추가적으로 <filter> 엘리먼트를 지정할 수도 있음.
	: 클라이언트가 요청한 모든 서비스 요청 신호와 전송값들은 모두 web.xml 로 전송됨
	- 클라이언트가 보낸 값들에 대한 인코딩 처리 같은 내용을 설정할 때 사용하면 됨.
	   : 전송값들을 필터링해서 프론트 컨트롤러로 보내게 됨.
  => context-param 에 여러가지 설정파일이 저장된 위치와 파일명을 등록함
	- db 연결 설정 파일, 스프링 설정 파일
	- mybatis 와 sprint 연결 설정 파일 + 매퍼파일의 위치와 파일명 등록 포함
	- 쿼리문 매퍼파일 등
	- 저장위치는 일반적으로 지정된 클래스패스(classpath : 클래스가 저장되는 위치를 의미함) 
	아래에 둠 : 지정된 설정 파일들을 읽어들여서 프로젝트 안의 모든 파일들이 사용할 수 있게함

 3. web.xml 에 servlet 으로 등록한 프론트 컨트롤러를 지정한 위치에 작성함
	- 파일명은 반드시 servlet-name 에 등록한 이름을 파일명의 시작글자로 써야 함
	<servlet-name>action</servlet-name> 
	=> 파일명은 action-servlet.xml 으로 작성하면 됨.
	- 베이스 패키지가 프로젝트명과 일치하는 확인함 : 프로젝트명이 변경되었을 경우 수정 가능함
	- 어떤 방식으로 프로젝트의 의존성 주입(DI)을 처리할 것인지를 지정함
	  예> <annotation-driven> : 어노테이션 방식을 사용하겠다는 의미임
	- 뷰리졸버(ViewResolver : 뷰관리자용 클래스) 지정함
	  하위 엘리먼트로 뷰 파일이 저장된 경로와 뷰 파일에 붙여질 확장자 등을 정할 수 있음
	  jsp 파일이 사용할 뷰 클래스를 지정할 수도 있음
	- 인터셉터 지정함 : 서비스를 처리한 컨트롤러로 넘어가기전이나 컨트롤러에서 클라이언트로
		응답하기 전에 처리할 내용을 작성하는 클래스임
	- 프로젝트 안에서 좀 더 컨틀로러나 서비스, repository(dao) 들이 공통으로 사용할
	  보조적인 기능에 대한 <bean> (캡슐화가 적용된 클래스) 등록 추가할 수도 있음.

 4. 설정 파일들 만들기
	: web.xml에 지정된 context-param 에 설정한 위치에 추가함
	- 폴더 지정하고, 폴더에서 new > sprint configuration bean file 을 선택함
	   => 파일 안에 필요한 내용을 <bean> 엘리먼트 추가해서 작성함
	   => context-param 에 설정한 파일명 규칙에 맞춰서 파일 작성함
		예> context-*.xml 로 지정되어 있으면
		    context-datasource.xml
		    context-mybatis.xml 또는 context-mapper.xml 
		    context-spring.xml   등
	- 필요한 설정 파일
	  => db 연결에 대한 설정 파일 : 데이터베이스 driver, url, username, password 등록
	  => 스프링과 마이바티스 연결 설정 파일
		: SqlSession 으로 사용할 클래스 지정, 트랜잭션, close 작동에 대한 속성 지정
		  사용할 sql mapper 파일명과 경로 지정, SqlSession 연결 처리
		- db 설정 파일과 연결 처리 

 5. 로그 출력 방법에 대한 설정 파일 추가 또는 수정
	: 로그 사용을 위한 라이브러리 선택함 (에: log4j)
	- 해당 라이브러리에 대한 로그 출력 설정 파일 만들기
	- sts 를 사용한 프로젝트 생성시에 log4j.xml 이 지정된 클래스패스 폴더에 자동 존재함
	- 로그 레벨 지정 : <logger> 사용 + 출력에 사용될 <appender> 지정
	- 출력 패턴 지정 : <appender> 사용
	  => 출력 타겟과 출력 문장 패턴을 지정함
	  => 출력 패턴 : %문자
	  => 각 클래스(컨트롤러, 서비스, 리포지터리)에서 로그 객체 생성함
		Log 레퍼런스 = LogFactory.getLog("클래스 자신");
		Logger 레퍼런스 = Logger.getLog(this.getClass() 또는 "자신클래스명.class");

		: 로그레퍼런스.debug("출력할 로그정보");
		  로그레퍼런스.trace("출력할 로그정보"); 사용하면, 
		지정된 타겟에 패턴에 따른 로그가 출력됨

	- jdbc 관련 로그 출력 처리는 db 연결 설정파일(예: context-datasource.xml)에
		해당 로그 라이브러리가 제공하는 클래스로 <bean> 등록을 하면 
		작동되는 sql 문장과 resultset 한 결과를 로그로 출력되게 할 수 있다.
		=> dao(repository) 클래스 작동시 자동 출력 처리됨. 


 6. 인터셉터 클래스 만들기 : 선택 사항임
	- 인터셉터에 대한 설정은 프론트 컨트롤러에서 해야 함
	  <interceptor> 엘리먼트 사용해서 등록함
 	- 인터셉터의 역할을 수행할 클래스는 반드시 HandlerInterceptorAdapter 클래스를
	  상속받아서 만들어야 함.
	  부모클래스의 preHandle() 과 postHandle() 메소드를 오버라이딩해서
	  컨트롤러 작동 전과 후에 대한 내용을 메소드 안에 작성하면 됨
	- 예를 들어, 로그인 여부에 따른 서비스 구동에 대한 처리 등...

 7. 스프링 웹 어플리케이션의 실행 흐름에 따라 클래스를 작성해 나감
   클라이언트가 서비스 요청 => web.xml => 프론트 컨트롤러 디스패처서블릿
   (url mapping 명 사용)			action-servlet.xml

   => 인터셉터 => Controller => Service => ServiceImpl => dao : mapper.xml 실행

   => 결과를 Service 로 리턴 => Controller 가 결과받음 : 뷰리졸버로 뷰파일명을 보냄
						모델에 뷰에 전달할 값도 저장함

   => 뷰리졸버(ViewResolver) 가 지정된 위치 아래에서 뷰파일을 찾아서 디스패처서블릿으로
	뷰를 주면, 디스패처서블릿이 요청한 클라이언트에게 뷰를 보냄

 8. 컨트롤러 만들기
   : new > class 로 만들기
   - 서비스별로 하나씩 만듦 
	예> 게시판 서비스 - BoardController
	    공지글 서비스 - NoticeController
	    회원 서비스 - MemberController
	    채팅 서비스 - ChattingController
   - <annotation-driven/> 방식으로 지정이 가장 편하고 쉬움
   - 반드시 클래스이름 바로 위에 @Controller 어노테이션 작성함
   - 메소드 추가함 : 메소드 하나가 서블릿 클래스 하나를 의미함
	=> 서블릿클래스일 경우, url-pattern(매핑할 가짜이름) 과 같은 의미의
	   @RequestMapping(name="가짜이름", 기타 속성 추가할 수 있음)
	   메소드 이름 바로 위레 작성함
   - 사용할 서비스 클래스에 대한 의존성 주입함
	: 의존성 주입이란 클래스에 대한 객체 생성을 스프링이 담당하도록 처리하는 것
	필드로 선언함
	=> @Resource("서비스의 이름")
	   서비스인터페이스명 레퍼런스;

	=> 각 메소드 안에서 서비스 인터페이스 또는 서비스 인터페이스를 상속받은 후손이 제공하는
	   메소드 실행하고, 결과 받도록 구현함
		자료형 반환값저장용변수 = 서비스레퍼런스.메소드명(전달값);
   	=> 서비스가 리턴한 값에 따라 뷰 파일을 지정하고 리턴 처리함 : View 클래스 사용함
	=> 선택한 뷰 파일에 전달값이 있을 경우에는 Model 클래스의 addObject() 메소드를
	   사용해서 값을 담아서 리턴할 수도 있음
	=> 만약 결과값도 담고, 뷰도 선택해야 한다면 ModelAndView 클래스를 사용하면 됨
	=> 해당 메소드가 클라이언트가 보낸 전송값을 받아야 할 경우, 메소드의 매개변수가 
	   받도록 함 











[컨트롤러(Controller)] -------------------------------------------------------------
 : 사용자의 요청을 해석하고, 
  모델과 뷰를 리턴하는 기능을 가진 메소드이다.

 - 스프링 웹 MVC 설계 패턴의 하나이며, 직접 구현하는 부분이다.

 - 기본적인 요소로 컨트롤러의 메소드, 애너테이션(Annotation), 
  사용자에게 요청에 대한 정보를 제공할 모델(Model)과 뷰(View)명이
  포함되어야 함.

 - 컨트롤러는 디스패처 서블릿(DispatcherServlet)이 요청한 
  핸들러 매핑에 의해 호출되며, 비즈니스 로직을 처리함.

 - 핸들러 매핑에 필요한 컨트롤러의 설정은 스프링 설정 파일에 빈(bean)으로
  정의하며 표기방법도 다양함.(어려움)
	=> 스프링 3.0 이전 컨트롤러는
	  org.springframework.web.servlet.mvc.Controller 
	  인터페이스를 구현하며, 
	  * Controller, AbstractController : 모든 처리 작업 직접 구현,
				 단순 처리용
	  * AbstractCommandController : 파라메타 값 검증기능 제공,
				 파라메타 매핑용
	  * AbstractFormController : 폼 전송 지원, 유효성 검사, 
				 자바빈 사용 용도
	  * SimpleFormController  : 폼 출력, 입력 데이터 처리, 
				 입력 폼 처리
	  * MultiActionController : 다수의 로직을 하나로 구현, 
				 다중 액션용
	  * UrlFilenameViewController : 단순히 요청을 뷰로 전달, 
				 정적 뷰 매핑용
	  *  등 다양함

	=> 스프링 3.0 부터는 좀 더 간결하게 작성할 수 있는 
	  @Annotation 기반의 컨트롤러 사용을 권장함.


[컨트롤러의 기본 구조] --------------------------------------------
 : 컨트롤러는 메서드이다.

 1. 사용자의 요청을 해석한다.
 2. 요청에 대한 처리를 서비스 로직 등에 위임한다.
 3. 서비스 로직에서 반환된 값으로 모델을 생성한다.
 4. 뷰를 결정한다.
 5. 뷰와 모델을 리턴한다.

 - 하나의 컨트롤러는 클라이언트의 요청방식에 따라
  다수의 구현 메서드가 필요할 수도 있다.
	=> @Controller 임을 선언하고
	=> @RequestMapping() 으로 요청 url 패턴을 지정한다.


//**************************************

 @Controller
 public class 클래스명 {

	@RequestMapping("매핑이름")
	public 반환타입 메서드명(매개변수)
	{
	  비즈니스 로직;
	  모델 생성;
	  return 뷰;
	}
 }

//**************************************

 - 비즈니스 로직들은 서비스 객체 등에 위임하고 반횐된 값으로 모델을
  생성하여 디스패처 서블릿에 반환한다.


[컨트롤러의 @애너테이션] ----------------------------------------------------------------
 : 메타 데이터를 기술하는 특별한 구문을 말함

 - 클래스, 메서드, 변수, 파라메타 선언과 패키지 등의 소스 코드에 삽입하여 사용함.

 - @애너테이션 의 형태로 표기하며, 소스 코드의 가독성을 높일 수 있음.

 - 스프링 3.0 이전에는 트랜잭션 관리, 빈 관리와 의존성주입 등에 사용되었음.
 - 스프링 3.0에서는 @Controller 의 컨트롤러 구현을 권장함.

 - 스프링에서 사용할 수 있는 애너테이션의 종류
	@Autowired
	@Component
	@Controller
	@Inject
	@MapperScan
	@ModelAttribute
	@Named
	@PathVariable
	@Qualifier
	@Repository
	@RequestMapping
	@RequestParam
	@Required
	@Resource
	@RequestBody
	@ResponseBody
	@Scope
	@Service
	@SessionAttributes
	@Transactional


[컨트롤러에서 기본적인 스프링 @애너테이션] ------------------------------------
 @Controller : 스프링 웹 MVC의 컨트롤러 선언
	클래스 상단에 적용
	org.springFramework.stereotype.Controller 포함 필요

	@Controller를 선언한 컨트롤러는 스프링 설정 파일에서 
	<context:component-scan base-package="패키지명"/> 태그에
	선언된 패키지에서 컨트롤러를 자동 검색함.

	다른 클래스나 패키지를 상속 받지 않는다.
	서블릿 API를 참조하지 않음.

//작성 예 *************************************
import org.springFramework.stereotype.Controller;

@Controller
public class 클래스명{ ... }
//********************************************


 @RequestMapping : 컨트롤러와 매핑되는 클라이언트의 요청 url 패턴 정의와
	HTTP 요청 메서드 등에 대해서 컨트롤러의 클래스나 메서드에 선언함.
	org.springFramework.web.bind.annotation.RequestMapping 
	포함 필요
	
	문자열 url, HTTP 메서드(전송방식), params() 타입, header(),
	클래스, 메서드에 매핑함

	- 문자열로 된 url 매핑 : @RequestMapping 의 괄호()속에
		"url 패턴"을 기술함.
		url 패턴은 ant 형식과 대체문자 또는 
		"url 패턴"에 "{}"으로 값을 파라메터로 전달받을 수도 있다.

		사용예>
		@RequestMapping("/login")
		@RequestMapping("login.do")
		@RequestMapping("/board/**/insert")
		@RequestMapping("/login/{userid, userpwd}")
		** {}의 변수를 path variable 라고 부름
		** 뷰 페이지에서 부여한 name 속성값 
			또는 쿼리스트링의 변수명임.


	- value와 method를 이용한 HTTP 메서드 매핑
		: value에 "url패턴", 
		method에 "RequestMethod.전송방식" 을 기술함.
		전송방식은 GET, POST 임.

		사용예>
		@RequestMapping(value="/login", method="RequestMethod.POST")
		@RequestMapping(method="RequestMethod.GET")


	- 타입 레벨과 메서드 레벨의 매핑
		: 클래스와 인터페이스에 붙는 @RequestMapping 은
		클래스 내의 모든 메서드에 공통으로 적용됨.
		메서드 매핑은 클래스 레벨의 매핑을 상속받음.

		사용예>
		@Controller
		@RequestMapping("/board")
		public class BoardController{
			@RequestMapping("/list")
			public String list(){ ... }
		}


 @SessionAttributes : 세션 설정과 세션 유지
	org.springFramework.web.bind.annotation.SessionAttribute 
	포함 필요

	클래스 상단에 선언함
	@Controller
	@SessionAttributes("cmd") 로 표기함
	세션으로 커맨드 객체를 저장함
	두 가지 기능을 제공함
	- 첫째 : 컨트롤러 메서드가 생성하는 모델 정보중에서 
		@SessionAttributes에 지정한 이름과 동일한 것이 있으면
		이를 세션에 저장함.
		즉, HttpSession session = request.getSession();
		   session.setAttribute("cmd", 전달객체);
		예를 들면, Member loginUser = new MemberService().loginCheck(...);
		   request.getSession().setAttribute("loginUser", loginUser);

		   클래스 상단에 @SessionAttributes("loginUser") 선언해 놓으면
		   위의 소스 코드를 loginUser = 서비스레퍼런스.loginCheck(...);

		뷰가 이 모델을 참조하여 저장된 정보를 폼에 보여줌.
		즉, ${cmd.필드명 }  또는 ${loginUser.필드명}

	- 둘째 : @ModelAttribute 가 지정한 파라매터가 있을 때 
		이 파라매터에 전달해 줄 객체를 세션에서 가져옴.
		즉, 객체 = (타입)session.getAttribute("cmd");


[그 외 스프링 @애너테이션] ------------------------------------------------------

 @Transactional : 트랜잭션 자동 제어 설정
	포함 패키지
	org.springFramework.transaction.annotation.Transactional

	트랜잭션 처리시 자동으로 트랜잭션을 제어하는 기능을 제공함.
	주로 서비스 클래스에서 사용됨.

	사용예>
	@Service
	@Transactional
	public class DeptServiceImpl implements DeptService
	{ ... }


 @Service : 비즈니스 로직의 서비스 컴포넌트 자동 설정
	포함 패키지
	org.springFramework.stereotype.Service

	컨트롤러와 데이터베이스를 처리하는 클래스에 비즈니스 로직(db 연결처리, 트랜잭션 처리 등)이나
	트랜잭션을 처리하는 클래스를 두게 되는데, 이 역할을 담당하는
	클래스를 서비스 클래스로 설정함.

	@Service 애너테이션을 선언한 클래스는 자동 검색을 통해
	빈으로 자동 설정됨.

	사용예>
	@Service
	@Transaction
	public class BoardServiceImpl implements BoardService, Service
	{ 
	   @Autowired  //마이바티스 db 연결 설정 파일 자동 연결처리
	   클래스명 레퍼런스;

	   @Resource("dao 클래스의 name")
	   클레스명 레퍼런스;

	   @Override	//상속받은 서비스 인터페이스가 제공하는 메소드 오버라이딩함
	   public 반환자료형 메소드명(컨트롤러가 보낸값 받을 매개변수){
		return dao레퍼런스.메소드명(값 받은 매개변수명);
	   }
	}


 @Repository : DAO 설정, 
	DB Exception을 DataAccessException으로 변환
	포함 패키지
	org.springFramework.stereotype.Repository
	
	DAO(Data Access Object)의 역할을 담당하여
	데이터베이스와 연동해서 데이터 검색이나 입력, 수정하는 
	클래스를 빈으로 설정하기 위해 사용함

	사용예>
	@Repository
	public class userDAOImpl implements AbstractDAO
	{ @Autowired 로 쿼리 매퍼 파일 자동 연결 처리함, 
	  @Resource 로 vo 클래스 의존성 주입함(setter 나 getter 의 사용이 필요한 경우)
	  쿼리 실행과 결과 리턴 처리 
	}


 @Component : 클래스를 빈으로 자동 설정
	포함 패키지
	org.springFramework.stereotype.Component

	디스패처 서블릿의 <context:component-scan> 태그로
	클래스를 빈으로 자동 설정함.

	사용예>
	@Component
	public class contractResource { ... }

	=> 다른 클래스에서 클래스를 사용할 때, 의존성주입 처리 가능함
	@Resource
	클래스명 레퍼런스;
	//자동 객체 생성하고, 자동 setter와 getter 구동됨

	메소드실행(레퍼런스);	//자동 getter 적용
	레퍼런스(.필드명) = 값;	//자동 setter들이 작동됨 
	

 @Autowired : 의존 관계 자동 설정, 설정 파일(xml) 자동 연결 처리
	생성자, 필드, 메서드에 붙여 스프링에서 자동 주입을 명시함.
	포함 패키지
	org.springFramework.beans.Factory.annotation.Autowired

	사용예>
	@Controller
	public class DepartmentController{
		@Autowired  //연결할 설정 파일의 <bean> 클래스 타입 선언
		private DeptService deptService;

		.......
	}
	=> DeptService 로 설정된 빈에서 DeptService에 주입(대입)이
	  가능한 객체를 찾게 되면 deptService 필드에 자동으로 주입됨.


 @Scope : 싱글 톤이 아닌 빈의 범위 지정
	포함 패키지
	org.springFramework.context.annotation.Scope

	빈의 범위를 싱글톤이 아닌 request, session, prototype 등으로
	설정함.

	사용예>
	@Scope("request")
	public class contractResource { ... }



[컨트롤러의 메서드에 사용되는 파라매터의 종류] ----------------------------------

 * ServletRequest 또는 HttpServletRequest
	: 클라이언트의 요청과 관련 정보와 동작을 갖고 있는 서블릿 API

 * HttpSession 
	: 세션 관련 객체

 * org.springframework.web.context.request.WebREquest 또는
   org.springframework.web.context.request.NativeRequest
	
 * java.util.Locale 
	: 디스패처 서블릿의 LocaleResolver가 설정한 Locale 객체

 * java.io.InputStream / java.io.Reader
	: 요청 콘텐츠에 접근하기 위한 객체

 * java.io.OutputStream / java.io.Writer
	: 응답 콘텐츠를 생성하기 위한 객체

 * java.security.Principal
	: 사용자 인증을 포함하고 있는 객체

 * @PathVariable
	: @RequestMapping의 "url 패턴/{변수명}"의 패스변수 애너테이션

	사용예>
	@RequestMapping("/login.do/{userid, userpwd}")
	public String view(@PathVariable("userid") String userId,
			@PathVariable("userpwd") String userPwd)
	{ 	... 
		return "뷰명";
	}


 * @MatrixVariable
	: uri 경로 요소에 "name"과 "value"의 쌍으로 되어 있는 값을
	 지정하는 애너테이션 파라메타

 * @RequestParam
	: HTTP 요청 파라메타를 메서드 파라메타에 전달하는 애너테이션
	 required, defaultVallue, value 속성을 사용할 수 있으며,
	 파라메터 값은 선언된 메서드 인수 자료형으로 변환됨.

	사용예>
	public String login(@RequestParam("id") String id,
			@RequestParam("pwd") String pwd)
	{ ... }


 * @RequestHeader
	: 요청 HTTP 해더 정보를 메서드 파라메타에 전달하는 애너테이션
	 파라메타 값은 선언된 메서드 인수 타입으로 변환됨

 * @RequestBody
	: HTTP 요청 본문 부분이 전달되는 애너테이션

 * @RequestPart
	: "multipart/form-data" 요청 부분의 내용을 접근하기 위한
	 애너테이션 파라메타

 * java.util.Map, 
   org.springframework.ui.Model,
   org.springframework.ui.ModelMap
	: 뷰에 전달할 모델 데이터 객체이며, Map은 put() 메서드, 
	 Model과 ModelMap은 addAttribute() 메서드가 제공됨.

 * org.springframework.web.servlet.mvc.support.RedirectAttributes

 * Command 또는 form 객체
	: HTTP 요청으로 전달된 파라메타를 주입한 커맨드 객체

 * org.springframework.validation.Errors,
   org.springframework.validation.BindingResults
	: 유효성 검사후 결과 데이터를 저장한 객체

 * org.springframework.web.bind.support.SessionStatus
	: 세션 폼 처리 등 해당 세션을 제거하기 위해 사용됨.

 * org.springframework.web.util.UrlComponentsBuilder
	: 요청 호스트, 포트, 컨텍스트 경로, 서블릿 매핑의 리터럴 부분에
	 의해서 관련 url을 준비하는 생성자
   
 * @ModelAttribute
	: 클라이언트에서 컨트롤러에게 하나 이상의 값이 전달되는 경우,
	 하나 이상의 값을 가지는 오브젝트 형태로 만들 수 있는 구조적인
	 정보를 모델이라고 부르며, 컨트롤러가 전달받은 오브젝트 형태의
	 정보가 @ModelAttribute 임.

	- 클라이언트의 요청 파라메타를 메서드에서 1 대 1로 받으면
	 @RequestParam 사용
	- 도메인 오브젝트(vo)나 자바빈의 프로퍼티에 요청 파라메타를
	 담아서 받으면 @ModelAttribute 사용

	사용예>
	@RequestMapping("/add", method="RequestMethod.POST")
	public User insert(@ModelAttribute UserVO userVO)
	{
		userService.insert(userVO);
		.......
	}


[컨트롤러의 메서드에서 사용되는 리턴 타입의 종류] -------------------------------

 * 메소드 선언 형식
	public 리턴타입 메소드명(파라메터) { ... return 반환값; }

 * ModelAndView
	: 컨트롤러가 디스패처 서블릿에 반환해야 하는 뷰와 모델 정보를
	 모두 포함하고 있는 객체
	- 스프링 2.x의 대표 타입임.

	- 생성자
	ModelAndView(String 뷰명)
	ModelAndView(String 뷰명, 맵객체)
	ModelAndView(String 뷰명, String name, Object value);

	- 메서드
	setViewName(String 뷰명)
	addObject(String 뷰명, Object name)
	addAllObject(Map values)

	사용예>
	ModelAndView mav = new ModelAndView();
	mav.setViewName("department");


 * Model.Map.ModelMap
	: String 을 리턴하는 메서드에 데이터만 전달하기 위해 사용함.
	 Map에는 put() 메서드, Model과 ModelMap은 addAttribute()
	 메서드 사용

	사용예>
	@RequestMapping("/test")
	public ModelMap test(TestVO testVo, ModelMap modelMap)
	{
		modelMap.addAttribute("name", "model값");
		return modelMap;
	}



 * String
	: 뷰 파일명만 반환함

	- 일반 형식
	public String 메서드명 { ... return "뷰명"; }

	사용예>
	@RequestMapping("/hello")
	public String hello(@RequestParam String name, Model m)
	{
		m.addAttribute("name", "값");
		return "hello";
	}



 * View
	: 엑셀, 파일 다운로드 등에 사용됨.


 * void
	: 메서드에서 HTTP 응답을 처리할 때나 
	 뷰명이 RequestToViewNameTranslator 에 의해 내부적으로
	 자동 생성되는 타입임.
	 요청 url패턴이 그대로 뷰명으로 반환됨.

	사용예>
	@RequestMapping("/hello")
	public void hello(@RequestParam String name, Model m)
	{
		m.addAttribute("name", name);		
	}
	

 * @ResponseBody
	: HTTP 본문을 리턴하며, 반환타입을 반드시 String으로 지정해야함.

	사용예>
	@RequestMapping("/hello")
	@ResponseBody
	public String hello(@RequestBody String s)
	{
		return s;
	}



[기타 컨트롤러 사용 예] ----------------------------------------------------------

 - "url 패턴"을 반환값으로 사용하는 컨트롤러

	@RequestMapping("/test")
	public ModelAndView test()
	{
		return new ModelAndView("test");
	} 


 - 요청시의 전송방식을 지정하는 컨트롤러

	@RequestMapping(value="/test1", 
			method="RequestMethod.GET)
	public String test1(Medel model)
	{
		return "test";
	}


 - 요청시 전송된 파라메터를 처리하는 컨트롤러

	@RequestMapping(value="/test2")
	public String test2(
		@RequestParam("param1") String param1, 
		Model model)
	{
		model.addAttribute("param1", param1);
		return "test";
	}


 - 요청 파라메타에 널 값을 허용하는 컨트롤러

	@RequestMapping(value="/test3")
	public String test3(
		@RequestParam(value="param1", required=false)
		 String param1, Model model)
	{
		model.addAttribute("param1", param1);
		return "test";
	}


 - REST 방식을 적용한 컨트롤러

	@RequestMapping(value="/test4/{name}")
	public String test4(@PathVariable("name") String name)
	{
		.....
		service.test(name);
		.....
		return "test";
	}










